import { Router } from "express";
import {
  getAllCustomers,
  getCustomerById,
  // createCustomer, // B·ªè import n·∫øu kh√¥ng d√πng route t·∫°o customer ·ªü ƒë√¢y
  updateCustomer,
  deleteCustomer,
  updateMyInfo, // H√†m c·∫≠p nh·∫≠t c·ªßa ch√≠nh user
  getMyInfo,    // H√†m l·∫•y th√¥ng tin c·ªßa ch√≠nh user
} from "../controllers/customers.controller.js";
import { requireAuth, authorizeRoles } from "../middlewares/authMiddleware.js";
import { param, body } from "express-validator"; // Import th√™m validator
import { validate } from "../utils/validate.js"; // Import middleware validate
import { asyncHandler } from "../utils/asyncHandler.js";

const r = Router();

// ===========================
// üë§ CUSTOMER SELF ROUTES (∆Øu ti√™n ƒë·ªãnh nghƒ©a tr∆∞·ªõc)
// ===========================

/**
 * @swagger
 * /api/customers/me:
 *   get:
 *     summary: L·∫•y th√¥ng tin kh√°ch h√†ng ƒëang ƒëƒÉng nh·∫≠p
 *     tags: [Customers]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       '200':
 *         description: Th√¥ng tin chi ti·∫øt c·ªßa kh√°ch h√†ng.
 *       '401':
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p.
 *       '404':
 *         description: Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng t∆∞∆°ng ·ª©ng v·ªõi t√†i kho·∫£n.
 */

r.get(
    "/me",
    requireAuth, // Ch·ªâ c·∫ßn ƒëƒÉng nh·∫≠p
    asyncHandler(getMyInfo)
);

/**
 * @swagger
 * /api/customers/me:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng ƒëang ƒëƒÉng nh·∫≠p
 *     tags: [Customers]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ho_ten:
 *                 type: string
 *               email:
 *                 type: string
 *                 format: email
 *               sdt:
 *                 type: string
 *               dia_chi:
 *                 type: string
 *     responses:
 *       '200':
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng.
 *       '400':
 *         description: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.
 *       '401':
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p.
 *       '403':
 *         description: Kh√¥ng c√≥ quy·ªÅn (kh√¥ng ph·∫£i customer).
 *       '404':
 *         description: Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t.
 */

r.put(
    "/me",
    requireAuth,
    authorizeRoles("customer"), // Ch·ªâ role 'customer' m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    [ // Th√™m validation cho body n·∫øu mu·ªën
        body('ho_ten').optional().trim().notEmpty().withMessage('H·ªç t√™n kh√¥ng ƒë∆∞·ª£c r·ªóng'),
        body('email').optional().trim().isEmail().withMessage('Email kh√¥ng h·ª£p l·ªá'),
        body('sdt').optional().trim().notEmpty().withMessage('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c r·ªóng'),
        body('dia_chi').optional().trim().notEmpty().withMessage('ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c r·ªóng'),
    ],
    validate,
    asyncHandler(updateMyInfo)
);


// ===========================
// üßë‚Äçüíº ADMIN ROUTES (ƒê·ªãnh nghƒ©a sau c√°c route /me)
// ===========================

/**
 * @swagger
 * /api/customers:
 *   get:
 *     summary: L·∫•y danh s√°ch kh√°ch h√†ng (Admin only)
 *     tags: [Customers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: q
 *         schema:
 *           type: string
 *         description: T√¨m ki·∫øm theo t√™n, email, sdt.
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *     responses:
 *       '200':
 *         description: Danh s√°ch kh√°ch h√†ng.
 *       '401':
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p.
 *       '403':
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.
 */

r.get(
    "/",
    requireAuth,
    authorizeRoles("admin"), // Ch·ªâ Admin
    asyncHandler(getAllCustomers)
);

/**
 * @swagger
 * /api/customers/{id}:
 *   get:
 *     summary: L·∫•y chi ti·∫øt kh√°ch h√†ng theo ID (Admin only)
 *     tags: [Customers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       '200':
 *         description: Chi ti·∫øt kh√°ch h√†ng.
 *       '404':
 *         description: Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng.
 */

r.get(
    "/:id(\\d+)", // Regex ƒë·ªÉ ph√¢n bi·ªát v·ªõi /me
    requireAuth,
    authorizeRoles("admin"), // Ch·ªâ Admin
    [ param("id", "ID kh√¥ng h·ª£p l·ªá").isInt({ min: 1 }).toInt() ],
    validate,
    asyncHandler(getCustomerById)
);

/**
 * @swagger
 * /api/customers/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t kh√°ch h√†ng theo ID (Admin only)
 *     tags: [Customers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ho_ten:
 *                 type: string
 *               email:
 *                 type: string
 *               sdt:
 *                 type: string
 *               dia_chi:
 *                 type: string
 *     responses:
 *       '200':
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng.
 *       '404':
 *         description: Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng.
 */

r.put(
    "/:id(\\d+)",
    requireAuth,
    authorizeRoles("admin"), // Ch·ªâ Admin
    [ param("id", "ID kh√¥ng h·ª£p l·ªá").isInt({ min: 1 }).toInt() ],
    // Th√™m validation cho body n·∫øu c·∫ßn
    validate,
    asyncHandler(updateCustomer)
);

/**
 * @swagger
 * /api/customers/{id}:
 *   delete:
 *     summary: X√≥a kh√°ch h√†ng theo ID (Admin only)
 *     tags: [Customers]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       '200':
 *         description: X√≥a th√†nh c√¥ng.
 *       '404':
 *         description: Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng.
 */

r.delete(
    "/:id(\\d+)",
    requireAuth,
    authorizeRoles("admin"), // Ch·ªâ Admin
    [ param("id", "ID kh√¥ng h·ª£p l·ªá").isInt({ min: 1 }).toInt() ],
    validate,
    asyncHandler(deleteCustomer)
);

export default r;
