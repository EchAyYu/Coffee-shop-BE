// ===============================
// ‚òï Coffee Shop Backend - Tables Controller (Full version)
// ===============================

import { Op } from "sequelize";
import Table from "../models/Table.js";

/**
 * üìã L·∫•y danh s√°ch b√†n (public)
 * Query params: khu_vuc, trang_thai, suc_chua_min
 */
export async function getAllTables(req, res) {
  try {
    const { khu_vuc, trang_thai, suc_chua_min } = req.query;
    const where = {};

    if (khu_vuc && khu_vuc !== "all") where.khu_vuc = khu_vuc;
    if (trang_thai && trang_thai !== "all") where.trang_thai = trang_thai;
    if (suc_chua_min && !isNaN(suc_chua_min))
      where.suc_chua = { [Op.gte]: parseInt(suc_chua_min) };

    const tables = await Table.findAll({
      where,
      order: [["id_ban", "ASC"]],
    });

    console.log(`‚úÖ L·∫•y danh s√°ch b√†n th√†nh c√¥ng (${tables.length} k·∫øt qu·∫£)`);

    res.json({
      success: true,
      data: tables,
      count: tables.length,
    });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch b√†n:", err.message);
    console.error(err.stack);
    res.status(500).json({
      success: false,
      message: "L·ªói l·∫•y danh s√°ch b√†n",
      error: err.message,
    });
  }
}

/**
 * üîç L·∫•y chi ti·∫øt 1 b√†n
 */
export async function getTableById(req, res) {
  try {
    const { id } = req.params;
    const table = await Table.findByPk(id);

    if (!table) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y b√†n",
      });
    }

    res.json({
      success: true,
      data: table,
    });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y chi ti·∫øt b√†n:", err.message);
    res.status(500).json({
      success: false,
      message: "L·ªói l·∫•y th√¥ng tin b√†n",
      error: err.message,
    });
  }
}

/**
 * ‚ûï T·∫°o b√†n m·ªõi (Admin)
 */
export async function createTable(req, res) {
  try {
    const { so_ban, ten_ban, khu_vuc, suc_chua, hinh_anh, mo_ta, gia_dat_ban } =
      req.body;

    // Ki·ªÉm tra tr√πng s·ªë b√†n
    const existing = await Table.findOne({ where: { so_ban } });
    if (existing) {
      return res.status(400).json({
        success: false,
        message: `B√†n s·ªë ${so_ban} ƒë√£ t·ªìn t·∫°i`,
      });
    }

    const newTable = await Table.create({
      so_ban,
      ten_ban,
      khu_vuc: khu_vuc || "main",
      suc_chua: suc_chua || 4,
      hinh_anh:
        hinh_anh ||
        "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400",
      mo_ta: mo_ta || "Kh√¥ng c√≥ m√¥ t·∫£",
      gia_dat_ban: gia_dat_ban || 0,
      trang_thai: "available",
    });

    res.status(201).json({
      success: true,
      message: "T·∫°o b√†n th√†nh c√¥ng",
      data: newTable,
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o b√†n:", err.message);
    res.status(500).json({
      success: false,
      message: "L·ªói t·∫°o b√†n",
      error: err.message,
    });
  }
}

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin b√†n
 */
export async function updateTable(req, res) {
  try {
    const { id } = req.params;
    const table = await Table.findByPk(id);

    if (!table) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y b√†n",
      });
    }

    await table.update(req.body);

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t b√†n th√†nh c√¥ng",
      data: table,
    });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t b√†n:", err.message);
    res.status(500).json({
      success: false,
      message: "L·ªói c·∫≠p nh·∫≠t b√†n",
      error: err.message,
    });
  }
}

/**
 * üóëÔ∏è X√≥a b√†n
 */
export async function deleteTable(req, res) {
  try {
    const { id } = req.params;
    const table = await Table.findByPk(id);

    if (!table) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y b√†n",
      });
    }

    await table.destroy();

    res.json({
      success: true,
      message: "X√≥a b√†n th√†nh c√¥ng",
    });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a b√†n:", err.message);
    res.status(500).json({
      success: false,
      message: "L·ªói x√≥a b√†n",
      error: err.message,
    });
  }
}

/**
 * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n
 */
export async function updateTableStatus(req, res) {
  try {
    const { id } = req.params;
    const { trang_thai } = req.body;

    const validStatuses = [
      "available",
      "occupied",
      "reserved",
      "maintenance",
    ];

    if (!validStatuses.includes(trang_thai)) {
      return res.status(400).json({
        success: false,
        message: `Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${validStatuses.join(
          ", "
        )}`,
      });
    }

    const table = await Table.findByPk(id);
    if (!table) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y b√†n",
      });
    }

    await table.update({ trang_thai });

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n th√†nh c√¥ng",
      data: table,
    });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n:", err.message);
    res.status(500).json({
      success: false,
      message: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n",
      error: err.message,
    });
  }
}
